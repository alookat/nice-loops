require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"clickMe":[function(require,module,exports){
exports.makeClickable = function(layer) {
  return layer.on(Events.DragEnd, function() {
    return this.animate({
      properties: {
        rotation: this.rotation + 45
      },
      curve: "spring(600,20,0)"
    });
  });
};



},{}],"dragMe":[function(require,module,exports){
exports.makeDraggable = function(layer) {
  var startX, startY;
  layer.draggable.enabled = true;
  startX = layer.x;
  startY = layer.y;
  return layer.on(Events.DragEnd, function() {
    return this.animate({
      properties: {
        x: startX,
        y: startY
      },
      curve: "spring(300,20,0)"
    });
  });
};



},{}],"scaleMe":[function(require,module,exports){
exports.makeScalable = function(layer, affectedLayer) {
  layer.draggable.enabled = true;
  layer.on(Events.DragStart, function() {
    return this.animate({
      properties: {
        scale: 0.9
      },
      curve: "spring(300,20,0)"
    });
  });
  return layer.on(Events.DragEnd, function() {
    this.animate({
      properties: {
        scale: 1
      },
      curve: "spring(300,20,0)"
    });
    return affectedLayer.animate({
      properties: {
        rotation: this.rotation + 45
      }
    });
  });
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZGFuaWVsL0dpdGh1Yi9uaWNlLWxvb3BzL21vZHVsZS10ZXN0cy5mcmFtZXIvbW9kdWxlcy9jbGlja01lLmNvZmZlZSIsIi9Vc2Vycy9kYW5pZWwvR2l0aHViL25pY2UtbG9vcHMvbW9kdWxlLXRlc3RzLmZyYW1lci9tb2R1bGVzL2RyYWdNZS5jb2ZmZWUiLCIvVXNlcnMvZGFuaWVsL0dpdGh1Yi9uaWNlLWxvb3BzL21vZHVsZS10ZXN0cy5mcmFtZXIvbW9kdWxlcy9zY2FsZU1lLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ01BLE9BQU8sQ0FBQyxhQUFSLEdBQXdCLFNBQUMsS0FBRCxHQUFBO1NBR3BCLEtBQUssQ0FBQyxFQUFOLENBQVMsTUFBTSxDQUFDLE9BQWhCLEVBQXlCLFNBQUEsR0FBQTtXQUNyQixJQUFJLENBQUMsT0FBTCxDQUNJO0FBQUEsTUFBQSxVQUFBLEVBQVk7QUFBQSxRQUFFLFFBQUEsRUFBVSxJQUFJLENBQUMsUUFBTCxHQUFnQixFQUE1QjtPQUFaO0FBQUEsTUFDQSxLQUFBLEVBQU8sa0JBRFA7S0FESixFQURxQjtFQUFBLENBQXpCLEVBSG9CO0FBQUEsQ0FBeEIsQ0FBQTs7Ozs7QUNBQSxPQUFPLENBQUMsYUFBUixHQUF3QixTQUFDLEtBQUQsR0FBQTtBQUNwQixNQUFBLGNBQUE7QUFBQSxFQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBaEIsR0FBMEIsSUFBMUIsQ0FBQTtBQUFBLEVBR0EsTUFBQSxHQUFTLEtBQUssQ0FBQyxDQUhmLENBQUE7QUFBQSxFQUlBLE1BQUEsR0FBUyxLQUFLLENBQUMsQ0FKZixDQUFBO1NBT0EsS0FBSyxDQUFDLEVBQU4sQ0FBUyxNQUFNLENBQUMsT0FBaEIsRUFBeUIsU0FBQSxHQUFBO1dBQ3JCLElBQUksQ0FBQyxPQUFMLENBQ0k7QUFBQSxNQUFBLFVBQUEsRUFBWTtBQUFBLFFBQUUsQ0FBQSxFQUFHLE1BQUw7QUFBQSxRQUFhLENBQUEsRUFBRyxNQUFoQjtPQUFaO0FBQUEsTUFDQSxLQUFBLEVBQU8sa0JBRFA7S0FESixFQURxQjtFQUFBLENBQXpCLEVBUm9CO0FBQUEsQ0FBeEIsQ0FBQTs7Ozs7QUNBQSxPQUFPLENBQUMsWUFBUixHQUF1QixTQUFDLEtBQUQsRUFBUSxhQUFSLEdBQUE7QUFDbkIsRUFBQSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQWhCLEdBQTBCLElBQTFCLENBQUE7QUFBQSxFQUdBLEtBQUssQ0FBQyxFQUFOLENBQVMsTUFBTSxDQUFDLFNBQWhCLEVBQTJCLFNBQUEsR0FBQTtXQUN2QixJQUFJLENBQUMsT0FBTCxDQUNJO0FBQUEsTUFBQSxVQUFBLEVBQVk7QUFBQSxRQUFFLEtBQUEsRUFBTyxHQUFUO09BQVo7QUFBQSxNQUNBLEtBQUEsRUFBTyxrQkFEUDtLQURKLEVBRHVCO0VBQUEsQ0FBM0IsQ0FIQSxDQUFBO1NBU0EsS0FBSyxDQUFDLEVBQU4sQ0FBUyxNQUFNLENBQUMsT0FBaEIsRUFBeUIsU0FBQSxHQUFBO0FBQ3JCLElBQUEsSUFBSSxDQUFDLE9BQUwsQ0FDSTtBQUFBLE1BQUEsVUFBQSxFQUFZO0FBQUEsUUFBRSxLQUFBLEVBQU8sQ0FBVDtPQUFaO0FBQUEsTUFDQSxLQUFBLEVBQU8sa0JBRFA7S0FESixDQUFBLENBQUE7V0FJQSxhQUFhLENBQUMsT0FBZCxDQUNDO0FBQUEsTUFBQSxVQUFBLEVBQVk7QUFBQSxRQUFDLFFBQUEsRUFBVSxJQUFJLENBQUMsUUFBTCxHQUFnQixFQUEzQjtPQUFaO0tBREQsRUFMcUI7RUFBQSxDQUF6QixFQVZtQjtBQUFBLENBQXZCLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIyBBZGQgdGhlIGZvbGxvd2luZyBsaW5lIHRvIHlvdXIgcHJvamVjdCBpbiBGcmFtZXIgU3R1ZGlvLiBcbiMgbXlNb2R1bGUgPSByZXF1aXJlIFwibXlNb2R1bGVcIlxuIyBSZWZlcmVuY2UgdGhlIGNvbnRlbnRzIGJ5IG5hbWUsIGxpa2UgbXlNb2R1bGUubXlGdW5jdGlvbigpIG9yIG15TW9kdWxlLm15VmFyXG5cblxuIyBBIGRyYWdnYWJsZSBmdW5jdGlvbiB3aXRob3V0IG91ciBtb2R1bGVcbmV4cG9ydHMubWFrZUNsaWNrYWJsZSA9IChsYXllcikgLT5cblxuICAgICMgQW5pbWF0ZSBzbGlnaHQgcm90YXRpb25cbiAgICBsYXllci5vbiBFdmVudHMuRHJhZ0VuZCwgLT5cbiAgICAgICAgdGhpcy5hbmltYXRlXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uICsgNDUgfVxuICAgICAgICAgICAgY3VydmU6IFwic3ByaW5nKDYwMCwyMCwwKVwiIiwiIyBBZGQgdGhlIGZvbGxvd2luZyBsaW5lIHRvIHlvdXIgcHJvamVjdCBpbiBGcmFtZXIgU3R1ZGlvLiBcbiMgbXlNb2R1bGUgPSByZXF1aXJlIFwibXlNb2R1bGVcIlxuIyBSZWZlcmVuY2UgdGhlIGNvbnRlbnRzIGJ5IG5hbWUsIGxpa2UgbXlNb2R1bGUubXlGdW5jdGlvbigpIG9yIG15TW9kdWxlLm15VmFyXG5cblxuIyBBIGRyYWdnYWJsZSBmdW5jdGlvbiB3aXRob3V0IG91ciBtb2R1bGVcbmV4cG9ydHMubWFrZURyYWdnYWJsZSA9IChsYXllcikgLT5cbiAgICBsYXllci5kcmFnZ2FibGUuZW5hYmxlZCA9IHRydWVcblxuICAgICMgU3RvcmUgY3VycmVudCB4IGFuZCB5IHBvc2l0aW9uXG4gICAgc3RhcnRYID0gbGF5ZXIueFxuICAgIHN0YXJ0WSA9IGxheWVyLnlcblxuICAgICMgQW5pbWF0ZSBiYWNrIG9uIERyYWdFbmRcbiAgICBsYXllci5vbiBFdmVudHMuRHJhZ0VuZCwgLT5cbiAgICAgICAgdGhpcy5hbmltYXRlXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHg6IHN0YXJ0WCwgeTogc3RhcnRZIH1cbiAgICAgICAgICAgIGN1cnZlOiBcInNwcmluZygzMDAsMjAsMClcIiIsIiMgQWRkIHRoZSBmb2xsb3dpbmcgbGluZSB0byB5b3VyIHByb2plY3QgaW4gRnJhbWVyIFN0dWRpby4gXG4jIG15TW9kdWxlID0gcmVxdWlyZSBcIm15TW9kdWxlXCJcbiMgUmVmZXJlbmNlIHRoZSBjb250ZW50cyBieSBuYW1lLCBsaWtlIG15TW9kdWxlLm15RnVuY3Rpb24oKSBvciBteU1vZHVsZS5teVZhclxuXG5cbiMgQSBkcmFnZ2FibGUgZnVuY3Rpb24gd2l0aG91dCBvdXIgbW9kdWxlXG5leHBvcnRzLm1ha2VTY2FsYWJsZSA9IChsYXllciwgYWZmZWN0ZWRMYXllcikgLT5cbiAgICBsYXllci5kcmFnZ2FibGUuZW5hYmxlZCA9IHRydWVcblxuICAgICMgQW5pbWF0ZSBzY2FsZSBvbiBkcmFnIHN0YXJ0LCBhbmQgdGhlbiBiYWNrIHRvIG5vcm1hbCBvbiBlbmRcbiAgICBsYXllci5vbiBFdmVudHMuRHJhZ1N0YXJ0LCAtPlxuICAgICAgICB0aGlzLmFuaW1hdGVcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgc2NhbGU6IDAuOSB9XG4gICAgICAgICAgICBjdXJ2ZTogXCJzcHJpbmcoMzAwLDIwLDApXCJcblxuICAgICMgQW5pbWF0ZSBzY2FsZSBvbiBkcmFnIG1vdmUsIGFuZCB0aGVuIGJhY2sgdG8gbm9ybWFsIG9uIGVuZFxuICAgIGxheWVyLm9uIEV2ZW50cy5EcmFnRW5kLCAtPlxuICAgICAgICB0aGlzLmFuaW1hdGVcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgc2NhbGU6IDEgfVxuICAgICAgICAgICAgY3VydmU6IFwic3ByaW5nKDMwMCwyMCwwKVwiXG5cbiAgICAgICAgYWZmZWN0ZWRMYXllci5hbmltYXRlXG4gICAgICAgIFx0cHJvcGVydGllczoge3JvdGF0aW9uOiB0aGlzLnJvdGF0aW9uICsgNDV9Il19
